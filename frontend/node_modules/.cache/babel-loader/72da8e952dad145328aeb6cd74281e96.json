{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\Screams-\\\\frontend\\\\src\\\\components\\\\Register.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { registerUser } from '../_actions/user_action';\nimport { TextField, Button } from '@material-ui/core';\nimport screamLogo64x from '../images/screamLogo64x.png';\nimport './Register.css';\n\nfunction Register(props) {\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      username: '',\n      phNumber: ''\n    },\n    validationSchema: Yup.object().shape({\n      firstName: Yup.string().required('First Name is required'),\n      lastName: Yup.string().required('Last Name is required'),\n      email: Yup.string().email('Email is Invalid').required('Email is required'),\n      password: Yup.string().min(8, 'Password must be at least 8 characters').required('Name is required'),\n      confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Name is required'),\n      username: Yup.string().required('Username is required'),\n      phNumber: Yup.string().required('Phone is required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        let submit = {\n          firstName: values.firstName,\n          lastName: values.lastName,\n          email: values.email,\n          password: values.password,\n          username: values.username,\n          phNumber: values.phNumber,\n          image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n        };\n        dispatch(registerUser(submit)).then(response => {\n          if (response.payload.success) {\n            props.history && props.history.push('/');\n          } else {\n            alert(response.payload.err.errmsg);\n          }\n        });\n        setSubmitting(false);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      dirty,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      handleReset\n    } = props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: screamLogo64x,\n      alt: \"screams\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"home__modalNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      name: \"firstName\",\n      label: \"First Name\",\n      variant: \"outlined\",\n      type: \"text\",\n      value: values.firstName,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.firstName && touched.firstName ? 'text error' : 'text',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 37\n      }\n    }), errors.firstName && touched.firstName && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 41\n      }\n    }, errors.firstName), /*#__PURE__*/React.createElement(TextField, {\n      name: \"lastName\",\n      label: \"Last Name\",\n      variant: \"outlined\",\n      type: \"text\",\n      value: values.lastName,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.lastName && touched.lastName ? 'text error' : 'text',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 37\n      }\n    }), errors.lastName && touched.lastName && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }\n    }, errors.lastName)), /*#__PURE__*/React.createElement(TextField, {\n      name: \"username\",\n      label: \"Username\",\n      variant: \"outlined\",\n      type: \"text\",\n      value: values.username,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.username && touched.username ? 'text-reg-input error' : 'text-reg-input',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }\n    }), errors.username && touched.username && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 37\n      }\n    }, errors.username), /*#__PURE__*/React.createElement(TextField, {\n      name: \"email\",\n      label: \"email\",\n      variant: \"outlined\",\n      type: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.email && touched.email ? 'text-reg-input error' : 'text-reg-input',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 33\n      }\n    }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 37\n      }\n    }, errors.email), /*#__PURE__*/React.createElement(TextField, {\n      name: \"password\",\n      label: \"Password\",\n      variant: \"outlined\",\n      type: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.password && touched.password ? 'text-reg-input error' : 'text-reg-input',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }, errors.password), /*#__PURE__*/React.createElement(TextField, {\n      name: \"confirmPassword\",\n      label: \"Confirm Password\",\n      variant: \"outlined\",\n      type: \"password\",\n      value: values.confirmPassword,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.confirmPassword && touched.confirmPassword ? 'text-reg-input error' : 'text-reg-input',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }), errors.confirmPassword && touched.confirmPassword && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 37\n      }\n    }, errors.confirmPassword), /*#__PURE__*/React.createElement(TextField, {\n      name: \"phNumber\",\n      label: \"Mobile\",\n      variant: \"outlined\",\n      type: \"text\",\n      value: values.phNumber,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.phNumber && touched.phNumber ? 'text-reg-input error' : 'text-reg-input',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    }), errors.phNumber && touched.phNumber && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 37\n      }\n    }, errors.phNumber), /*#__PURE__*/React.createElement(Button, {\n      className: \"home__logBtn\",\n      variant: \"outlined\",\n      type: \"submit\",\n      onClick: handleSubmit,\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 33\n      }\n    }, \"SignUp\"))));\n  });\n}\n\nexport default Register;","map":{"version":3,"sources":["D:/Development/Screams-/frontend/src/components/Register.js"],"names":["React","moment","useDispatch","Yup","Formik","registerUser","TextField","Button","screamLogo64x","Register","props","dispatch","firstName","lastName","email","password","confirmPassword","username","phNumber","object","shape","string","required","min","oneOf","ref","values","setSubmitting","setTimeout","submit","image","unix","then","response","payload","success","history","push","alert","err","errmsg","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { registerUser } from '../_actions/user_action';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport screamLogo64x from '../images/screamLogo64x.png';\r\nimport './Register.css';\r\n\r\n\r\nfunction Register(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n                username: '',\r\n                phNumber: '',\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n                firstName: Yup.string()\r\n                    .required('First Name is required'),\r\n                lastName: Yup.string()\r\n                    .required('Last Name is required'),\r\n                email: Yup.string()\r\n                    .email('Email is Invalid')\r\n                    .required('Email is required'),\r\n                password: Yup.string()\r\n                    .min(8, 'Password must be at least 8 characters')\r\n                    .required('Name is required'),\r\n                confirmPassword: Yup.string()\r\n                    .oneOf([Yup.ref('password'), null], 'Password must match')\r\n                    .required('Name is required'),\r\n                username: Yup.string()\r\n                    .required('Username is required'),\r\n                phNumber: Yup.string()\r\n                    .required('Phone is required'),\r\n            })}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                setTimeout(() => {\r\n                    let submit = {\r\n                        firstName: values.firstName,\r\n                        lastName: values.lastName,\r\n                        email: values.email,\r\n                        password: values.password,\r\n                        username: values.username,\r\n                        phNumber: values.phNumber,\r\n                        image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`,\r\n                    }\r\n\r\n                    dispatch(registerUser(submit)).then(response => {\r\n                        if (response.payload.success) {\r\n                            props.history && props.history.push('/');\r\n                        } else {\r\n                            alert(response.payload.err.errmsg)\r\n                        }\r\n                    })\r\n                    setSubmitting(false);\r\n                }, 500);\r\n            }}\r\n        >\r\n            {props => {\r\n                const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    dirty,\r\n                    isSubmitting,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    handleReset,\r\n                } = props;\r\n\r\n                return (\r\n                    <div>\r\n                        <center><img src={screamLogo64x} alt='screams'></img></center>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <center>\r\n                                <section className='home__modalNameField'>\r\n                                    <TextField\r\n                                        name='firstName'\r\n                                        label='First Name'\r\n                                        variant='outlined'\r\n                                        type='text'\r\n                                        value={values.firstName}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        className={\r\n                                            errors.firstName && touched.firstName ? 'text error' : 'text'\r\n                                        }\r\n                                        required\r\n                                    />\r\n                                    {errors.firstName && touched.firstName && (\r\n                                        <div className='input-feedback'>{errors.firstName}</div>\r\n                                    )}\r\n                                    <TextField\r\n                                        name='lastName'\r\n                                        label='Last Name'\r\n                                        variant='outlined'\r\n                                        type='text'\r\n                                        value={values.lastName}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        className={\r\n                                            errors.lastName && touched.lastName ? 'text error' : 'text'\r\n                                        }\r\n                                        required\r\n                                    />\r\n                                    {errors.lastName && touched.lastName && (\r\n                                        <div className='input-feedback'>{errors.lastName}</div>\r\n                                    )}\r\n                                </section>\r\n                                <TextField\r\n                                    name='username'\r\n                                    label='Username'\r\n                                    variant='outlined'\r\n                                    type='text'\r\n                                    value={values.username}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    className={\r\n                                        errors.username && touched.username ? 'text-reg-input error' : 'text-reg-input'\r\n                                    }\r\n                                    required\r\n                                />\r\n                                {errors.username && touched.username && (\r\n                                    <div className='input-feedback'>{errors.username}</div>\r\n                                )}\r\n\r\n                                <TextField\r\n                                    name='email'\r\n                                    label='email'\r\n                                    variant='outlined'\r\n                                    type='email'\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    className={\r\n                                        errors.email && touched.email ? 'text-reg-input error' : 'text-reg-input'\r\n                                    }\r\n                                    required\r\n                                />\r\n                                {errors.email && touched.email && (\r\n                                    <div className='input-feedback'>{errors.email}</div>\r\n                                )}\r\n\r\n                                <TextField\r\n                                    name='password'\r\n                                    label='Password'\r\n                                    variant='outlined'\r\n                                    type='password'\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    className={\r\n                                        errors.password && touched.password ? 'text-reg-input error' : 'text-reg-input'\r\n                                    }\r\n                                    required\r\n                                />\r\n                                {errors.password && touched.password && (\r\n                                    <div className='input-feedback'>{errors.password}</div>\r\n                                )}\r\n\r\n                                <TextField\r\n                                    name='confirmPassword'\r\n                                    label='Confirm Password'\r\n                                    variant='outlined'\r\n                                    type='password'\r\n                                    value={values.confirmPassword}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    className={\r\n                                        errors.confirmPassword && touched.confirmPassword ? 'text-reg-input error' : 'text-reg-input'\r\n                                    }\r\n                                    required\r\n                                />\r\n                                {errors.confirmPassword && touched.confirmPassword && (\r\n                                    <div className='input-feedback'>{errors.confirmPassword}</div>\r\n                                )}\r\n\r\n                                <TextField\r\n                                    name='phNumber'\r\n                                    label='Mobile'\r\n                                    variant='outlined'\r\n                                    type='text'\r\n                                    value={values.phNumber}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    className={\r\n                                        errors.phNumber && touched.phNumber ? 'text-reg-input error' : 'text-reg-input'\r\n                                    }\r\n                                    required\r\n                                />\r\n                                {errors.phNumber && touched.phNumber && (\r\n                                    <div className='input-feedback'>{errors.phNumber}</div>\r\n                                )}\r\n\r\n                                <Button className='home__logBtn' variant='outlined' type='submit' onClick={handleSubmit} disabled={isSubmitting}>SignUp</Button>\r\n                            </center>\r\n                        </form>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default Register\r\n"]},"metadata":{},"sourceType":"module"}